name: Continuous Deployment

on:
  workflow_dispatch:
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible and GCP dependencies
        run: |
          pip install --upgrade pip
          pip install "ansible>=9,<10" "requests>=2.31,<3" "google-auth>=2.22,<3"

      - name: Install Ansible GCP collection
        run: |
          ansible-galaxy collection install "google.cloud:>=1.1.0,<2.0.0"

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Get latest release name
        id: release
        run: |
          LATEST_RELEASE=$(gsutil ls -l gs://${{ vars.TF_STATE_BUCKET }}/releases-elixir/*.tar.gz | grep -v TOTAL | sort -k2 -r | head -n 1 | awk '{print $NF}' | xargs basename)
          echo "release_name=${LATEST_RELEASE}" >> $GITHUB_OUTPUT

      - name: Write SSH key from secret
        run: |
          mkdir -p ~/.ssh
          printf '%s' '${{ secrets.GCP_DEPLOY_SSH_PRIVATE_KEY }}' > ~/.ssh/ansible_deploy_key
          chmod 600 ~/.ssh/ansible_deploy_key

      - name: Write GCP credentials to file
        run: |
          printf '%s' '${{ secrets.GCP_CREDENTIALS_JSON }}' > /tmp/gcp-key.json
          chmod 600 /tmp/gcp-key.json

      - name: Verify Ansible setup
        run: |
          ansible --version
          ansible-galaxy collection list | grep google.cloud

      - name: Build inventory from template
        env:
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
        run: |
          sed "s|__PROJECT_ID__|$GCP_PROJECT_ID|g" \
            .infra/ansible/inventory.gcp.yml > /tmp/inventory.gcp.yml

      - name: Run Ansible deployment
        run: |
          cd .infra/ansible
          ansible-playbook \
            -i /tmp/inventory.gcp.yml \
            deploy-playbook.yml \
            -vvv
        env:
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          GCP_SERVICE_ACCOUNT_FILE: /tmp/gcp-key.json
          GCS_BUCKET: ${{ vars.TF_STATE_BUCKET }}
          RELEASE_NAME: ${{ steps.release.outputs.release_name }}
          ANSIBLE_HOST_KEY_CHECKING: 'False'
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
          DATABASE_URL: ${{ secrets.SIMPLE_ELIXIR_DB_URL }}

      - name: Debug app status
        env:
          GCP_ZONE: ${{ vars.GCP_ZONE }}
        run: |
          IP=$(gcloud compute instances describe simple-elixir-instance \
            --zone "$GCP_ZONE" \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          
          echo "=== VM IP: $IP ==="
          echo "=== Checking if app is running ==="
          ssh -i ~/.ssh/ansible_deploy_key -o StrictHostKeyChecking=no ubuntu@$IP "ps aux | grep simple_elixir_server | grep -v grep || echo 'App not running'"
          
          echo "=== Checking port 4000 ==="
          ssh -i ~/.ssh/ansible_deploy_key -o StrictHostKeyChecking=no ubuntu@$IP "sudo netstat -tulpn | grep 4000 || echo 'Nothing listening on 4000'"
          
          echo "=== App logs (last 50 lines) ==="
          ssh -i ~/.ssh/ansible_deploy_key -o StrictHostKeyChecking=no ubuntu@$IP "find /opt/simple_elixir_server -name '*.log' -type f 2>/dev/null || echo 'No log files found'"
          ssh -i ~/.ssh/ansible_deploy_key -o StrictHostKeyChecking=no ubuntu@$IP "tail -100 /opt/simple_elixir_server/tmp/log/erlang.log.1 2>/dev/null || tail -100 /opt/simple_elixir_server/tmp/log/run_erl.log 2>/dev/null || echo 'No logs found'"
          
          echo "=== Testing HTTP connection ==="
          curl -v http://$IP:4000 || echo "HTTP connection failed"

      - name: Clean up credentials
        if: always()
        run: |
          rm -f /tmp/gcp-key.json
          rm -f ~/.ssh/ansible_deploy_key*
