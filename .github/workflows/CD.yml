name: Continuous Deployment

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible and GCP dependencies
        run: |
          pip install --upgrade pip
          pip install "ansible>=9,<10" "requests>=2.31,<3" "google-auth>=2.22,<3"

      - name: Install Ansible GCP collection
        run: |
          ansible-galaxy collection install "google.cloud:>=1.1.0,<2.0.0"

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Get latest release name
        id: release
        run: |
          LATEST_RELEASE=$(gsutil ls -l gs://${{ vars.TF_STATE_BUCKET }}/releases-elixir/*.tar.gz | grep -v TOTAL | sort -k2 -r | head -n 1 | awk '{print $NF}' | xargs basename)
          echo "release_name=${LATEST_RELEASE}" >> $GITHUB_OUTPUT

      - name: Write SSH key from secret
        run: |
          mkdir -p ~/.ssh
          printf '%s' '${{ secrets.GCP_DEPLOY_SSH_PRIVATE_KEY }}' > ~/.ssh/ansible_deploy_key
          chmod 600 ~/.ssh/ansible_deploy_key

      - name: Write GCP credentials to file
        run: |
          printf '%s' '${{ secrets.GCP_CREDENTIALS_JSON }}' > /tmp/gcp-key.json
          chmod 600 /tmp/gcp-key.json

      - name: Verify Ansible setup
        run: |
          ansible --version
          ansible-galaxy collection list | grep google.cloud

      - name: Build inventory from template
        env:
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
        run: |
          sed "s|__PROJECT_ID__|$GCP_PROJECT_ID|g" \
            .infra/ansible/inventory.gcp.yml > /tmp/inventory.gcp.yml

      - name: Get VM external IP
        id: vm_ip
        run: |
          EXTERNAL_IP=$(gcloud compute instances describe simple-elixir-instance \
            --project=${{ vars.GCP_PROJECT_ID }} \
            --zone=${{ vars.GCP_ZONE }} \
            --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          echo "external_ip=${EXTERNAL_IP}" >> $GITHUB_OUTPUT

      - name: Run Ansible deployment
        run: |
          cd .infra/ansible
          ansible-playbook \
            -i /tmp/inventory.gcp.yml \
            deploy-playbook.yml \
            --extra-vars "phx_host=${{ steps.vm_ip.outputs.external_ip }}" \
            -vvv
        env:
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          GCP_SERVICE_ACCOUNT_FILE: /tmp/gcp-key.json
          GCS_BUCKET: ${{ vars.TF_STATE_BUCKET }}
          RELEASE_NAME: ${{ steps.release.outputs.release_name }}
          ANSIBLE_HOST_KEY_CHECKING: 'False'
          SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
          DATABASE_URL: ${{ secrets.SIMPLE_ELIXIR_DB_URL }}
          BREVO_API_KEY: ${{ secrets.BREVO_API_KEY }}
          BREVO_SENDER_ADDRESS: ${{ vars.BREVO_SENDER_ADDRESS }}

      - name: Clean up credentials
        if: always()
        run: |
          rm -f /tmp/gcp-key.json
          rm -f ~/.ssh/ansible_deploy_key*
