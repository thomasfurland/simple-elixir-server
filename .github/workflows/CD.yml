name: Continuous Deployment

on:
  workflow_dispatch:
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible and GCP dependencies
        run: |
          pip install --upgrade pip
          pip install "ansible>=9,<10" "requests>=2.31,<3" "google-auth>=2.22,<3"

      - name: Install Ansible GCP collection
        run: |
          ansible-galaxy collection install "google.cloud:>=1.1.0,<2.0.0"

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Get latest release name
        id: release
        run: |
          LATEST_RELEASE=$(gsutil ls -l gs://${{ vars.TF_STATE_BUCKET }}/releases-elixir/*.tar.gz | grep -v TOTAL | sort -k2 -r | head -n 1 | awk '{print $NF}' | xargs basename)
          echo "release_name=${LATEST_RELEASE}" >> $GITHUB_OUTPUT

      - name: Generate SSH key for deployment
        run: |
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/ansible_deploy_key -N ""
          chmod 600 ~/.ssh/ansible_deploy_key

      - name: Add SSH key to GCP instance
        run: |
          gcloud compute instances add-metadata simple-elixir-instance \
            --zone=${{ vars.GCP_ZONE }} \
            --metadata=ssh-keys="ubuntu:$(cat ~/.ssh/ansible_deploy_key.pub)"

      - name: Write GCP credentials to file
        run: |
          printf '%s' '${{ secrets.GCP_CREDENTIALS_JSON }}' > /tmp/gcp-key.json
          chmod 600 /tmp/gcp-key.json

      - name: Sanity check creds + vars
        run: |
          test -s /tmp/gcp-key.json
          jq -r .project_id /tmp/gcp-key.json || true
          echo "GCP_PROJECT_ID=$GCP_PROJECT_ID"
        env:
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}

      - name: Verify Ansible setup
        run: |
          ansible --version
          ansible-galaxy collection list | grep google.cloud

      - name: Test inventory
        run: |
          ansible-inventory -i .infra/ansible/inventory.gcp.yml --list -vvv
        env:
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          GCP_SERVICE_ACCOUNT_FILE: /tmp/gcp-key.json

      - name: Run Ansible deployment
        run: |
          ansible-playbook \
            -i .infra/ansible/inventory.gcp.yml \
            .infra/ansible/deploy-playbook.yml \
            --private-key ~/.ssh/ansible_deploy_key \
            -v
        env:
          GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          GCP_SERVICE_ACCOUNT_FILE: /tmp/gcp-key.json
          GCS_BUCKET: ${{ vars.TF_STATE_BUCKET }}
          RELEASE_NAME: ${{ steps.release.outputs.release_name }}
          ANSIBLE_HOST_KEY_CHECKING: 'False'

      - name: Clean up credentials
        if: always()
        run: |
          rm -f /tmp/gcp-key.json
          rm -f ~/.ssh/ansible_deploy_key*
